What happens when you initialize a repository? Why do you need to do it?
    - An empty repository is created this contains no commit.
      It works that way so that it won't automatically include files you actually don't want to keep track of. This could clog your computer and your log which would make it hard to
      find an error or an old version.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
    -  Staging area is the area for preparation where files are meant to be created. Only files in this area are going to be included in the commit executed when you open it up in the future. This helps
    to divide up the new files so they can be accessed more easily.

How can you use the staging area to make sure you have one commit per logical
change?
 - First add files that are related to the first commit you create, after this organize where the medium sized and significant changes are and separate them into commits.
    Next you stage other files that are related to your commits and you can put them together to make sure you don't have to many or too little.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
 - When you want to add an experiment which could potentially fix a bug in your system.
    Make your own experimental branch and then add the experiments that work to your main part of the program.

How do the diagrams help you visualize the branch structure?
 - With using git log, you can see the history of the branch and what changes were made.
      That would give you the overview of your project which would help you decide if you want to merge one part with another or see where your separate programs are in order.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
 -  This will result in both becoming the head
     The diagram shown by git log shows the merged commit has two parts.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
 Pros: Saves your time. Makes you concentrate on the changes which actually contain information

Cons: Make it easier when two people are working on one thing. 
